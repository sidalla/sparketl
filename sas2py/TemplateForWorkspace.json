{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "sas2py"
		},
		"GitHub1_credential": {
			"type": "secureString",
			"metadata": "Secure string for 'credential' of 'GitHub1'"
		},
		"sas2py-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sas2py-WorkspaceDefaultSqlServer'"
		},
		"GitHub1_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "sas2py"
		},
		"sas2py-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://sas2py1.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/GitHub1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "GitHub",
				"typeProperties": {
					"username": "[parameters('GitHub1_properties_typeProperties_username')]",
					"credential": {
						"type": "SecureString",
						"value": "[parameters('GitHub1_credential')]"
					},
					"encryptedCredential": "ew0KICAiVmVyc2lvbiI6ICIyMDE3LTExLTMwIiwNCiAgIlByb3RlY3Rpb25Nb2RlIjogIktleSIsDQogICJTZWNyZXRDb250ZW50VHlwZSI6ICJQbGFpbnRleHQiLA0KICAiQ3JlZGVudGlhbElkIjogIlNBUzJQWV83MzVmZWUwMC02NWE3LTQ4YmItYTVkZC1iNDZiMjAwODg4MzAiDQp9"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sas2py-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('sas2py-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sas2py-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('sas2py-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/trinity2_pandas')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 0,
				"nbformat_minor": 0,
				"bigDataPool": {
					"referenceName": "sas2py",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/41d25d8b-87fe-470e-9088-7a8f7823207d/resourceGroups/sas2py/providers/Microsoft.Synapse/workspaces/sas2py/bigDataPools/sas2py",
						"name": "sas2py",
						"type": "Spark",
						"endpoint": "https://sas2py.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sas2py",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"# SAS2PY"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"## Metrics\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"###################################################\n",
							"#Code Generated by SAS2PY (www.sas2py.com)\n",
							"####################################################\n",
							"#Version: v1.9.9_30 09/23/2021 :0/0-0/0:12/31/1969 19:00:00\n",
							"#conversionTime: 09/28/2021 23:17:26\n",
							"#projectName: default\n",
							"#sasFileName: \n",
							"#outputLang: pandas\n",
							"#Metrics:\n",
							"#linesInFile: 14\n",
							"#linesOfCode: 13\n",
							"#conversionUnits: 20\n",
							"#complexity: 2\n",
							"#timeTaken: 248\n",
							"#processedBlocks: 2\n",
							"#passedBlocks: 2\n",
							"#failedBlocks: 0\n",
							"#totalErrors: 0\n",
							"#errorBlocks: []\n",
							"#{'label': 'DATA', 'parent': 'MACRO', 'linesOfCode': 7, 'conversionUnits': 7, 'complexity': 0, 'Statements': 7, 'Characters': 0, 'processedBlocks': 2, 'passedBlocks': 2, 'failedBlocks': 0, 'errors': 0, 'timeTaken': 0}\n",
							"#{'label': 'MACRO', 'parent': 'MACRO', 'linesOfCode': 13, 'conversionUnits': 13, 'complexity': 2, 'Statements': 13, 'Characters': 99, 'processedBlocks': 2, 'passedBlocks': 2, 'failedBlocks': 0, 'errors': 0, 'timeTaken': 236}\n",
							"\n",
							"\n",
							"\n",
							"\n",
							"\n",
							"\n",
							""
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"## Block 1\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"#%%\n",
							"\n",
							"from sas2py.pandas.base import *\n",
							"\n",
							"_DEBUGMODE = False\n",
							"_vars_ = vars()\n",
							"_env_ = {}\n",
							"#load env params from json or ini file\n",
							"#_env_ = loadEnvFromFile('envJsonFile.json')\n",
							"#_env_ = loadEnvFromINI('envIniFile.ini', environments=[\"[prod]\"])\n",
							"         "
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"## Block 2\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"## Block 3\n",
							"SAS Lines: 1 to 9\n",
							"\n",
							"%macro kitten(df);\n",
							"\n",
							" \n",
							"data #&df;\n",
							"\n",
							" \n",
							"x=1;\n",
							"\n",
							" \n",
							"run;\n",
							"\n",
							" \n",
							"%mendm;\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"\n",
							"#%%\n",
							"\n",
							"#--------Passed START BlockNum: 3, SAS Lines: 1 to 9, Errors: 0, LOC: 5, Time: 86-----\n",
							"START_BLOCK_pandas('Passed', 3)\n",
							"\n",
							"def kitten(_vars_, df):\n",
							"    #macros used\n",
							"    \n",
							"\n",
							"    mapDFs = {}\n",
							"    \n",
							"\n",
							"    def df_func():\n",
							"        res = []\n",
							"        row = {}\n",
							"        row['x'] = 1\n",
							"        return res\n",
							"    \n",
							"\n",
							"    df_rows = df_func()\n",
							"    df = pd.DataFrame(df_rows)\n",
							"    showDF_pandas(df)\n",
							"    _vars_.update(vars())\n",
							"    return\n",
							"\n",
							"END_BLOCK_pandas('Passed', 3)\n",
							"#--------Passed END BlockNum: 3-----\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {},
						"source": [
							"## Block 4\n",
							"SAS Lines: 12 to 26\n",
							"\n",
							"%macro foo;\n",
							"\n",
							" \n",
							"%do i=2 to 5;\n",
							"\n",
							" \n",
							"data drug&i;\n",
							"\n",
							" \n",
							" set foo;\n",
							"\n",
							" \n",
							" x = 4;\n",
							"\n",
							" \n",
							"run;\n",
							"\n",
							" \n",
							"%end;\n",
							"\n",
							" \n",
							"%mendm;\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"\n",
							"#%%\n",
							"\n",
							"#--------Passed START BlockNum: 4, SAS Lines: 12 to 26, Errors: 0, LOC: 8, Time: 150-----\n",
							"START_BLOCK_pandas('Passed', 4)\n",
							"\n",
							"def foo(_vars_, ):\n",
							"    #macros used\n",
							"    \n",
							"\n",
							"    for i in getRangeList_pandas(2,5):\n",
							"        mapDFs = {}\n",
							"        if 'foo' in _vars_:\n",
							"            foo = _vars_['foo']\n",
							"        foo_tmp = foo\n",
							"        \n",
							"\n",
							"        mapDFs['foo'] = foo\n",
							"        \n",
							"\n",
							"        def drugi_func(row=None):\n",
							"            row['x'] = 4\n",
							"            return row\n",
							"        \n",
							"\n",
							"        drugi = foo.apply(lambda row: drugi_func(row ), axis=1)\n",
							"        showDF_pandas(drugi)\n",
							"        \n",
							"\n",
							"        foo = foo_tmp\n",
							"    _vars_.update(vars())\n",
							"    return\n",
							"\n",
							"END_BLOCK_pandas('Passed', 4)\n",
							"#--------Passed END BlockNum: 4-----\n",
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		}
	]
}